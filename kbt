#!/usr/bin/env perl

use 5.010;

use strict;
use warnings;

use Getopt::Long qw/GetOptions HelpMessage/;
use HTTP::Request;
use IO::File;
use JSON qw/to_json from_json/;
use LWP::UserAgent;

GetOptions(
    'help'     => sub { HelpMessage(0) },
    'host=s'   => \(my $host = 'localhost:9200'),
    'index=s'  => \(my $index = '.kibana'),
    'output=s' => \(my $output = 'kbt_export.json'),
    'type=s'   => \(my $type = 'all'),
) or HelpMessage(1);

# add default port if missing
$host =~ s/^(.*)(?!\:\d+)$/$1:9200/;

my $cmd = $ARGV[0];

HelpMessage(1) unless $cmd;

if ($cmd eq 'list') {
    &list(0);
}
elsif ($cmd eq 'export') {
    &export();
}
else {
    HelpMessage(1);
}

sub list {
    my $export = shift;

    my $ids = {};

    foreach my $t ('search', 'visualization', 'dashboard') {

        next if ($type ne 'all' and $t ne $type);

        print '* '.uc $t.":\n" if $type eq 'all' and $export == 0;
        my $request = HTTP::Request->new(POST => "http://$host/$index/$t/_search");
        $request->content('{"query":{"match_all":{}}}');

        my $ua = LWP::UserAgent->new;
        my $response = $ua->request($request);

        if ($response->is_success) {
            my $json = from_json($response->decoded_content);
            foreach (@{ $json->{'hits'}->{'hits'} }) {
                if ($export == 0) {
                    print "$_->{'_id'}\n";
                }
                elsif ($export == 1) {
                    push @{ $ids->{'docs'} }, { '_id' => $_->{'_id'}, '_type' => $t };
                }
            }
        }
        else {
            print STDERR $response->status_line."\n";
        }
        print "\n" if $type eq 'all' and $export == 0;
    }

    return ($export == 1) ? $ids : 1; 
}

sub export {
    my $ids = &list(1);

    my $json = to_json($ids);

    my $request = HTTP::Request->new(POST => "http://$host/$index/_mget");
    $request->content($json);

    my $ua = LWP::UserAgent->new;
    my $response = $ua->request($request);

    my $fh = IO::File->new($output, q{>});

    if ($response->is_success) {
        my $res = from_json($response->decoded_content);
        my $export = [];
        foreach (@{ $res->{'docs'} }) {
            delete $_->{'found'};
            delete $_->{'_version'};
            delete $_->{'_index'};
            push @{ $export }, $_;
        }
        print $fh to_json($export);
    }
    else {
        print STDERR $response->status_line."\n";
    }

    close $fh;

    return 1;
}

__END__

=encoding utf8

=head1 NAME

kbt - Kibana Backup Tool

=head1 DESCRIPTION

This script allow to list and export kibana resources like search, visualization and dashboard.

=head1 SYNOPSIS

kbt [OPTIONS] <COMMAND>

 OPTIONS
   --type     TYPE           Type of kibana resources {search|visualization|dashboard} (defaults to all)
   --output   FILE           Backup file (defaults to kbt_export.json)
   --host     IP:PORT        Ip address of elasticsearch instance (defaults to localhost:9200)
   --index    INDEX          Kibana index (defaults to .kibana)
   --help                    Print this help

 COMMAND
   list                      list resource's id
   export                    export resources

=head1 AUTHOR

Laurent Lavaud

=head1 VERSION

0.3

=cut
